флойд

#include <iostream>
#include <string>
using namespace std;
int n,k,mat[101][101],i,j;
int main()
{


    cin>>n;
    for(i=0;i<n;i++)
        for(j=0;j<n;j++)
            cin>>mat[i][j];
    for(k = 0;k < n; k++)
        for(i = 0;i < n; i++)
            for(j = 0;j < n; j++)
                mat[i][j] = min(mat[i][j],mat[i][k]+mat[k][j]);
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
            cout<<mat[i][j]<<" ";
        }
        cout<<endl;
    }

    return 0;
}

https://informatics.mccme.ru/mod/statements/view.php?id=258#1


дейкстра
https://informatics.mccme.ru/mod/statements/view.php?id=193#1

#include <bits/stdc++.h>
using namespace std;

int main() {
	int n, s, f;
	cin >> n >> s >> f;

	vector< vector<pair<int, int>> > g(n + 1);

	int INF = 1000;

	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= n; j++) {
			int x;
			cin >> x;

			if (x == -1) continue;

			g[i].push_back(make_pair(j, x));
		}
	}

	vector<int> d(n + 1, INF);
	d[s] = 0;

	vector<bool> used(n + 1, false);

	for (int i = 1; i <= n; i++) {
		int v = -1;
		for (int j = 1; j <= n; j++) {
			if (!used[j] && (v == -1 || d[j] < d[v])) v = j;
		}
		if (d[v] == INF)
			break;
		used[v] = true;

		for (size_t j = 0; j < g[v].size(); j++) {
			int to = g[v][j].first, len = g[v][j].second;
			d[to] = min(d[to], d[v] + len);
		}
	}

	if (d[f] == INF) cout << -1 << endl;
	else cout << d[f] << endl;

	return 0;
}


-------------
#include <bits/stdc++.h>
#define long long int;

using namespace std;

const int INF = 2000000009;

signed main()
{
    int n, s, f;
    cin >> n >> s >> f;
    s--;
    f--;
    vector < vector < pair <int, int> > > g(n);
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++){
            int t;
            cin >> t;
            if (t >= 0)
                g[i].push_back(make_pair(j, t));
        }
   vector <int> d(n, INF);
   d[s] = 0;
   set <pair <int, int> > q;
   q.insert(make_pair(d[s], s));
   while (!q.empty()){
        int v = q.begin() -> second;
        q.erase(q.begin());
        for (size_t i = 0; i < g[v].size(); i++){
            int to = g[v][i].first, len = g[v][i].second;
            if (d[v] + len < d[to]){
                q.erase(make_pair(d[to], to));
                d[to] = d[v] + len;
                q.insert(make_pair(d[to], to));
            }
        }
    }


    if (d[f] == INF)
        return cout << -1, 0;
    cout << d[f];


    return 0;
}




-------

https://informatics.mccme.ru/mod/statements/view3.php?id=261&chapterid=185#1
прим
#include <bits/stdc++.h>

using namespace std;

int main() {
    ios_base::sync_with_stdio(0);
    const int inf = 1e9;

    int n, m, ans = 0;
    cin >> n >> m;
    vector<pair<int, int>> graph[n];
    vector<bool> used(n, false);
    vector<int> dist(n, inf);
    multiset<pair<int, int>> ms;
    dist[0] = 0;
    ms.insert({ 0, 0 });
    for (int i = 1; i < n; i++)
        ms.insert({ inf, i });
    for (int i = 0; i < m; i++) {
        int a, b, w;
        cin >> a >> b >> w;
        graph[a - 1].push_back({ b - 1, w });
        graph[b - 1].push_back({ a - 1, w });
    }

    for (int i = 0; i < n; i++) {
        int v = ms.begin() -> second;
        ms.erase(ms.begin());
        used[v] = true;
        for (auto u : graph[v]) {
            int to = u.first, w = u.second;
            if (w < dist[to] && !used[to]) {
                ms.erase({ dist[to], to });
                if (dist[to] != inf)
                    ans -= dist[to];
                dist[to] = w;
                ans += w;
                ms.insert({ dist[to], to });
            }
        }
    }

    cout << ans << endl;
    return 0;
}


-------------
краскала

https://informatics.mccme.ru/mod/statements/view.php?id=567#1

#include <bits/stdc++.h>
using namespace std;
vector <pair <int, pair <int, int> > > g;
int parent[100001];
int rang[100001];
void make_set(int a)
{
    parent[a] = a;
    rang[a] = 1;
}
int find_set(int a)
{
    if (parent[a] == a)
        return a;
    return parent[a] = find_set(parent[a]);
}
void union_set(int a, int b)
{
    a = find_set(a);
    b = find_set(b);
    if (a != b)
    {
        if (rang[a] > rang[b])
        {
            parent[b] = a;
            rang[a] += rang[b];
        }
        else
        {
            parent[a] = b;
            rang[b] += rang[a];
        }
    }
}
long long ans = 0;
int main()
{
    ios_base::sync_with_stdio(0);
    int n;
    cin >> n;
    for (int i = 1; i <= n; ++i)
        for (int j = 1; j <= n; ++j)
        {
            int x;
            cin >> x;
            if (i > j)
                g.push_back({x, {i, j}});
        }
    sort(g.begin(), g.end());
    for (int i = 1; i <= n; ++i)
        make_set(i);
    for (int i = 1; i <= n; ++i)
        for (int j = 1; j <= n; ++j)
        {
            int x;
            cin >> x;
            if (x == 1)
                union_set(i, j);
        }
    for (int i = 0; i < g.size(); ++i)
    {
        int w = g[i].first;
        int x = g[i].second.first;
        int y = g[i].second.second;
        if (find_set(x) != find_set(y))
        {
            ans += w;
            union_set(x, y);
        }
    }
    cout << ans;
    return 0;
}
-----------


#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

#define b_e(a) a.begin(), a.end()
typedef long long int ll;

class DisjointSet {
    vector <int> parent; // parent[i] показывает к какому множеству принадлежит
                         // вершина i
    vector <int> size;   // size[i] показывает размер множества к которому
                         // принадлежит вершина i
public:
    DisjointSet() {}
    DisjointSet(int nodes): parent(nodes, 0), size(nodes, 1) {
        for (int i = 0; i < nodes; ++i) {
            parent[i] = i;
        }
    }

    int find_parent(int u);
    bool set_union(int u, int v);
};

struct edge {
    int u, v, w;
};
bool edge_comp(edge a, edge b);

int main() {
    int nodes; ll mst_weight = 0;
    vector <edge> graph;
    vector <vector <int>> adj_matrix;

    cin >> nodes;
    adj_matrix.resize(nodes, vector <int> (nodes, 0));
    for (int i = 0; i < nodes; ++i) {
        for (int j = 0; j < nodes; ++j) {
            cin >> adj_matrix[i][j];
        }
    }

    DisjointSet s(nodes);
    for (int i = 0; i < nodes; ++i) {
        for (int j = 0; j < nodes; ++j) {
            bool is_edge;
            cin >> is_edge;

            if (i > j) {
                if (!is_edge) {
                    edge e = {i, j, adj_matrix[i][j]};
                    graph.push_back(e);
                } else {
                    s.set_union(i, j);
                }
            }
        }
    }

    sort(b_e(graph), edge_comp);
    for (edge e: graph) {
        if (s.set_union(e.u, e.v)) {
            mst_weight += e.w;
        }
    }

    cout << mst_weight << endl;
    return 0;
}

int DisjointSet::find_parent(int u) {
    if (parent[u] == u) return u;
    return parent[u] = find_parent(parent[u]);
}

bool DisjointSet::set_union(int u, int v) {
    u = find_parent(u);
    v = find_parent(v);

    if (u == v) return false;

    if (u < v) {
        swap(u, v);
    }

    parent[u] = v;
    size[v] += u;

    return true;
}

bool edge_comp(edge a, edge b) {
    return a.w < b.w;
}



///..............................
максимальный поток
поиск максимального потока методом Форда-Фалкерсона;
для поиска дополняющего пути используется поиск в ширину}
https://informatics.mccme.ru/mod/statements/view.php?id=262#1
#include <iostream>
#include <queue>
#include <cstring>
#include <algorithm>

using namespace std;

const int MAXN = 15;
const int INF = 1*1000*1000;

int n, cF[MAXN][MAXN], s, t, layers[MAXN], ptr[MAXN];

int bfs() {
    queue <int> Q;
    Q.push(s);
    memset(layers, -1, n * sizeof(layers[0]));
    layers[s] = 0;
    while (Q.size()) {
        int v = Q.front();
        Q.pop();
        for (int to = 0; to < n; ++to) {
            if (cF[v][to] && layers[to] == -1) {
                layers[to] = layers[v] + 1;
                Q.push(to);
            }
        }
    }
    return layers[t] != -1;
}

int dfs(int v, int flow) {
    cerr << "    " << v << " " << flow << endl;
    if (!flow)
        return 0;
    if (v == t)
        return flow;
    for (int &to = ptr[v]; to < n; ++to) {
        if (layers[to] != layers[v] + 1)
            continue;
        int pushed = dfs(to, min(flow, cF[v][to]));
        if (pushed) {
            cF[v][to] -= pushed;
            cF[to][v] += pushed;
            return pushed;
        }
    }
    return 0;
}

int dinic() {
    int flow = 0;
    while (bfs()) {
        cerr << "level graph: " << layers[t] << endl;
        memset(ptr, 0, n * sizeof(ptr[0]));
        while (int pushed = dfs(s, INF)) {
            flow += pushed;
        }
    }
    return flow;
}

int main() {
    int m;
    cin >> n >> m;
    for (int i = 0; i < m; ++i) {
        int a, b, c;
        cin >> a >> b >> c;
        a--;
        b--;
        cF[a][b] = c;
    }
    s = 0;
    t = n - 1;
    cout << dinic() << endl;
    return 0;
}


///
https://informatics.mccme.ru/mod/statements/view3.php?chapterid=1680#1
гамильтонов цикл
#include <iostream>
#include <cstdlib>

using namespace std;

int n;
int a[20][20];
bool vis[20];
int answer=100000;
int s=0;

bool dfs(int v)
{
	bool flag=true;
	bool res;

	vis[v]=true;
	if (v==0) {
		for (int i=0; i<n; i++) flag=flag && vis[i];
		if (flag) {
		    vis[v]=false;
            if (answer>s) answer=s;
            return true;
		}

	}

	for (int i=0; i<n; i++)
		if ((!vis[i])&&(a[v][i]!=0)) {
				s=s+a[v][i];
				res=dfs(i);
				s=s-a[v][i];
			}

	vis[v]=false;
	return false;
}


int main()
{
		//freopen("../13.", "rt", stdin);
		//freopen("../13.a", "wt", stdout);

		bool final=false;

		cin >> n;

		if (n==1) {
		    cout << "0";
		    return 0;
		    }

		for (int i=0; i<n; i++)
			for (int j=0; j<n; j++) cin >> a[i][j];

		for (int i=0; i<n; i++)
			{
					s=a[0][i];
					final=dfs(i);
            }

		if (answer==100000) cout << "-1";
		else cout << answer;

        return 0;
}
